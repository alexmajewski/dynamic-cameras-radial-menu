{
	"fileversion":"19.5.303",
	"name":"viewport_cameras",
	"categories":"Standard",
	"pane":"scene",
	"label":"Cameras",
	"type":"script_submenu",
	"script":"# Created by Alex Majewski\n# Version 1.0.1\n# Project can be found at: \n# https://github.com/alexmajewski/dynamic-cameras-radial-menu\n\n\ndef get_camera_paths():\n    cam_paths = []\n    if is_lops:\n        network = network_editor.pwd()\n        display_node = network.displayNode()\n        stage = display_node.stage()\n        \n        selection1 = hou.LopSelectionRule()\n        selection1.setPathPattern('%camera_menu')\n        selection2 = hou.LopSelectionRule()\n        selection2.setPathPattern('%type:Camera')\n           \n        sdf_paths1 = selection1.expandedPaths(stage=stage)\n        sdf_paths2 = selection2.expandedPaths(stage=stage)\n    \n        for sdf in sdf_paths1:\n            cam_paths.append(sdf.pathString)\n        \n        for sdf in sdf_paths2:\n            if sdf not in sdf_paths1:\n                cam_paths.append(sdf.pathString)\n    else:\n        node = hou.node(\"/obj\")\n        for child in node.allSubChildren():\n            if child.type().name() == \"cam\":\n                cam_paths.append(child.path())\n                \n    return cam_paths\n\nnetwork_editor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)\n\ndef construct_rmenu(paths):\n    menu = {}\n    camera_paths = paths[:8]\n    for i, path in enumerate(camera_paths):\n        menu[slots[i]] = {\n            'type':'script_action',\n            'label': path.split(\"/\")[-1],\n            'icon':'OBJ_camera',\n            'script':lambda camera=path, **kwargs: set_camera(camera)\n        }\n    return menu\n    \ndef set_camera(cam_path):\n    selected_viewport = scene_viewer.selectedViewport()\n    selected_viewport.setCamera(str(cam_path))\n    \n#########################################################################\n\nslots = ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw']\n\nscene_viewer = kwargs[\"pane\"]\nis_lops = scene_viewer.isViewingSceneGraph()\n\nif network_editor is not None:\n    cameras = get_camera_paths()\n    rmenu = construct_rmenu(cameras)\n\n    radialmenu.setRadialMenu(rmenu)\n        \nelse:\n    print(\"Please open a Network Editor first.\")\n\n"
}
